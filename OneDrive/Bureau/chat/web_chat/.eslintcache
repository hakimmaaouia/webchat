[{"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\chat\\chat.tsx":"1","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\login\\login.tsx":"2","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\App.tsx":"3","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\messages.tsx":"4","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\index.tsx":"5","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\message.tsx":"6","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\reportWebVitals.ts":"7","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\input\\input.tsx":"8"},{"size":1041,"mtime":1611867449178,"results":"9","hashOfConfig":"10"},{"size":1585,"mtime":1611515156694,"results":"11","hashOfConfig":"10"},{"size":593,"mtime":1611520721112,"results":"12","hashOfConfig":"10"},{"size":1457,"mtime":1611698794684,"results":"13","hashOfConfig":"10"},{"size":575,"mtime":1611866767312,"results":"14","hashOfConfig":"10"},{"size":2045,"mtime":1611501655090,"results":"15","hashOfConfig":"10"},{"size":425,"mtime":1606856949535,"results":"16","hashOfConfig":"10"},{"size":2923,"mtime":1611698609410,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"yaqda2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\chat\\chat.tsx",["39"],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\login\\login.tsx",["40"],"import React, { useState } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport image from \"../../assets/8.svg\"\r\nimport \"./login.css\"\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n  const Login=()=>{\r\n\r\n\r\n    const [Name,setName]=useState(\"\");\r\n   const [Room,setRoom]=useState(\"\");  \r\n   const [visible,setVisible]=useState(false); \r\n\r\n   let history = useHistory();\r\n   const handleClick=()=>{\r\n     if((Room.length>1) && (Name.length>1)){\r\n     history.push(`/chat?Room=${Room}&Name=${Name}`);\r\n   \r\n     }else{\r\n       setVisible(true)\r\n     }\r\n   }\r\n   \r\n    return (\r\n      <div style={{lineHeight:\"50px\"}}>\r\n        <img src={image}></img>    <div style={{color:\"#D38B5D\",fontSize:\"35px\",fontWeight:\"bold\"}}>join</div>\r\n      \r\n<hr style={{height:\"1px\",background:\"#000\", border:\"1px solid #000\", width:\"65%\"}}></hr>\r\n   <div>\r\n        <TextField id=\"Room\" label=\"Room\" style={{width:\"65%\"}}  onChange={(evet)=>setRoom(evet.target.value)}/>\r\n        </div>\r\n        <div>\r\n        <TextField id=\"Name\" label=\"Name\" style={{width:\"65%\"}}  onChange={(evet)=>setName(evet.target.value)}/>\r\n        </div>\r\n        <div>\r\n        <Button variant=\"contained\"  style={{width:\"65%\"}} onClick={handleClick}> Sign in</Button>\r\n        </div>\r\n\r\n  {visible ? (<div style={{border:\"1px solid red\",color:\"red\",borderRadius:\"5px\",fontSize:\"12px\"}}>\r\n        The name or room you’ve entered doesn’t match any account\r\n          </div>):null }\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Login;","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\App.tsx",[],["41","42"],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\messages.tsx",["43","44"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Message from \"./message\";\r\nimport \"./message.css\";\r\nconst Messages = ({ socket, Name }: any) => {\r\n  const [messages, setmessages] = useState<any[]>([]);\r\n  useEffect(() => {\r\n    socket?.on(\"messages\", (message: any) => {\r\n      setmessages((messages) => [...messages, message]);\r\n      if (messageEl.current) {\r\n        let scroll =\r\n          messageEl.current.scrollHeight - messageEl.current.clientHeight;\r\n        messageEl.current.scrollTo(0, scroll);\r\n      }\r\n    });\r\n  }, []);\r\n  const [typing, settyping] = useState<any>({ typing: false, Name: \"\" });\r\n  useEffect(() => {\r\n    socket.on(\"ntyping\", ({ Name, typing }: any) => {\r\n      settyping({ typing, Name });\r\n    });\r\n  }, []);\r\n  const messageEl = useRef<HTMLInputElement>(null);\r\n\r\n  const typing_display = (Name: any) => {\r\n    return (\r\n      <>\r\n        {Name}  is typing\r\n        <span className=\"typing-dot\"></span>\r\n        <span className=\"typing-dot\"></span>\r\n        <span className=\"typing-dot\"></span>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"chatbox\" ref={messageEl}>\r\n        {messages.map((message: any, i: any) => (\r\n          <Message key={i} message={message} Name={Name} />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"typing_container\">\r\n        {typing.typing ? typing_display(typing.Name) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Messages;\r\n","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\index.tsx",[],["45","46"],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\message.tsx",[],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\reportWebVitals.ts",[],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\input\\input.tsx",["47"],"import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputBase from \"@material-ui/core/InputBase\";\r\nimport Picker from \"emoji-picker-react\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { SmileOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"./input.css\";\r\nconst Input = ({ socket, Room, Name }: any) => {\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\r\n    null\r\n  );\r\n  const [message, setmessage] = useState(\"\");\r\n  const sendmessage = (event: any) => {\r\n    if (message.trim().length > 1) {\r\n      socket?.emit(\"sendmessage\", { message, Room, Name });\r\n    }\r\n    setmessage(\"\");\r\n  };\r\n\r\n  const onEmojiClick = (event: any, emojiObject: any) => {\r\n    setmessage(message + emojiObject.emoji);\r\n  };\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  let timeout: any;\r\n  timeout = 2000;\r\n  const [typing, settyping] = useState(false);\r\n\r\n  const keyup = () => {\r\n    console.log(\"happening\");\r\n    settyping(true);\r\n    socket.emit(\"typing\", { typing, Name, Room });\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(is_typing, 2000);\r\n  };\r\n  const is_typing = () => {\r\n    settyping(false);\r\n    socket.emit(\"typing\", { typing, Name, Room });\r\n  };\r\n\r\n  return (\r\n    <div className=\"send\">\r\n      <InputBase\r\n        placeholder=\"Message\"\r\n        inputProps={{ \"aria-label\": \"Message\" }}\r\n        onChange={(event) => setmessage(event.target.value)}\r\n        onKeyDown={(event) => {\r\n          if (event.key === \"Enter\") {\r\n            sendmessage(event);\r\n          }\r\n        }}\r\n        value={message}\r\n        onKeyUp={() => keyup()}\r\n        className=\"inputmessage\"\r\n      />\r\n      <span className=\"hidden\">\r\n        <IconButton\r\n          aria-label=\"emoji\"\r\n          aria-describedby={id}\r\n          onClick={handleClick}\r\n        >\r\n          <SmileOutlined />\r\n        </IconButton>\r\n      </span>\r\n      <Button\r\n        size=\"medium\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={(e) => sendmessage(e)}\r\n        endIcon={<SendOutlined />}\r\n        style={{ color: \"#f3ffb6\", background: \"#12496d\" }}\r\n      >\r\n        Send\r\n      </Button>\r\n\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\",\r\n        }}\r\n      >\r\n        <Picker onEmojiClick={onEmojiClick} />\r\n      </Popover>\r\n    </div>\r\n  );\r\n};\r\nexport default Input;\r\n",{"ruleId":"48","severity":1,"message":"49","line":20,"column":6,"nodeType":"50","endLine":20,"endColumn":33,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":28,"column":9,"nodeType":"54","endLine":28,"endColumn":26},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"48","severity":1,"message":"59","line":15,"column":6,"nodeType":"50","endLine":15,"endColumn":8,"suggestions":"60"},{"ruleId":"48","severity":1,"message":"59","line":21,"column":6,"nodeType":"50","endLine":21,"endColumn":8,"suggestions":"61"},{"ruleId":"55","replacedBy":"62"},{"ruleId":"57","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":27,"nodeType":"66","messageId":"67","endLine":1,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Name' and 'Room'. Either include them or remove the dependency array.","ArrayExpression",["68"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["69"],"no-negated-in-lhs",["70"],"React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["71"],["72"],["69"],["70"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",{"desc":"73","fix":"74"},"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"75","fix":"77"},"Update the dependencies array to be: [ENDPOINT, Name, Room, location.search]",{"range":"78","text":"79"},"Update the dependencies array to be: [socket]",{"range":"80","text":"81"},{"range":"82","text":"81"},[670,697],"[ENDPOINT, Name, Room, location.search]",[551,553],"[socket]",[758,760]]