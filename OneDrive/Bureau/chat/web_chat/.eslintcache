[{"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\chat\\chat.tsx":"1","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\login\\login.tsx":"2","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\App.tsx":"3","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\messages.tsx":"4","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\index.tsx":"5","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\message.tsx":"6","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\reportWebVitals.ts":"7","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\input\\input.tsx":"8"},{"size":1052,"mtime":1611404876778,"results":"9","hashOfConfig":"10"},{"size":1154,"mtime":1611439208763,"results":"11","hashOfConfig":"10"},{"size":593,"mtime":1611434068823,"results":"12","hashOfConfig":"10"},{"size":548,"mtime":1611402962348,"results":"13","hashOfConfig":"10"},{"size":500,"mtime":1606856949535,"results":"14","hashOfConfig":"10"},{"size":1652,"mtime":1611432054949,"results":"15","hashOfConfig":"10"},{"size":425,"mtime":1606856949535,"results":"16","hashOfConfig":"10"},{"size":2329,"mtime":1611438336339,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"yaqda2",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\chat\\chat.tsx",["38"],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\login\\login.tsx",["39"],"import React, { useState } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport image from \"../../assets/8.svg\"\r\n\r\nimport {\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\n  const Login=()=>{\r\n    const [Name,setName]=useState(\"\");\r\n   const [Room,setRoom]=useState(\"\");  \r\n    return (\r\n      <div style={{lineHeight:\"50px\"}}>\r\n        <img src={image} height=\"100px\" width=\"100px\"></img>    <div style={{color:\"#ffffff\",fontSize:\"35px\",fontWeight:\"bold\"}}>join</div>\r\n      \r\n<hr style={{height:\"1px\",background:\"#000\", border:\"1px solid #000\", width:\"65%\"}}></hr>\r\n   <div>\r\n        <TextField id=\"Room\" label=\"Room\" style={{width:\"65%\"}}  onChange={(evet)=>setRoom(evet.target.value)}/>\r\n        </div>\r\n        <div>\r\n        <TextField id=\"Name\" label=\"Name\" style={{width:\"65%\"}}  onChange={(evet)=>setName(evet.target.value)}/>\r\n        </div>\r\n        <div>\r\n        <Link to={`/chat?Room=${Room}&Name=${Name}`}>\r\n        <Button variant=\"contained\"  style={{width:\"65%\"}} >Sign in</Button>\r\n        </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Login;","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\App.tsx",[],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\messages.tsx",["40"],"import React, { useState, useEffect } from \"react\";\r\nimport  Message from \"./message\"\r\nimport \"./message.css\"\r\n\r\nconst Messages=({socket}:any)=>{\r\n    const [messages, setmessages] = useState<any[]>([]);\r\n    useEffect(() => {\r\n    socket?.on(\"messages\", (message: any) => {\r\n        setmessages(messages => [...messages, message]);\r\n      })\r\n    },[])\r\n    \r\n    return(\r\n        <div className=\"chatbox\"> \r\n        {messages.map((message:any, i:any) =><Message  key={i} message={message}/>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Messages;\r\n","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\index.tsx",[],["41","42"],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\messages\\message.tsx",["43"],"import React from \"react\";\r\nimport \"./message.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Emoji from \"react-emoji-render\";\r\n\r\nconst Adminmessage=({\r\n  message: {\r\n    Name,\r\n    message,\r\n    dates: { date, date_ob, hours, minutes, month, seconds, year },\r\n  },\r\n}: any)=>{\r\n  return(\r\n    <div className=\"message-data-time centre\">\r\n      {message}  {hours}:{minutes}:{seconds} {year}/{month}/{date}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Usermessage=({\r\n  message: {\r\n    Name,\r\n    message,\r\n    dates: { date, date_ob, hours, minutes, month, seconds, year },\r\n  },\r\n}: any)=>{\r\nreturn(\r\n  <div className=\"containerMessage\">\r\n  <div style={{ display: \"flex\"}}>\r\n    <Avatar>{Name[0].toUpperCase()}</Avatar>\r\n    <div className=\"data_name\">\r\n      <span>{Name}</span>{\" \"}\r\n      <span className=\"message-data-time\">\r\n        {hours}:{minutes}:{seconds} {year}/{month}/{date}\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <div className=\"message-box\">\r\n  <Emoji text={message} />\r\n  </div>\r\n</div>\r\n)\r\n}\r\n\r\nconst Mymessage=({\r\n  message: {\r\n    Name,\r\n    message,\r\n    dates: { date, date_ob, hours, minutes, month, seconds, year },\r\n  },\r\n}: any)=>{\r\nreturn(\r\n<div  >\r\n    <div>\r\n     \r\n      <span>\r\n        {hours}:{minutes}:{seconds} {year}/{month}/{date}\r\n      </span>\r\n      {\"  \"} <span>{Name}</span>{\"  \"}\r\n    <Avatar>{Name[0].toUpperCase()}</Avatar>\r\n  </div>\r\n  </div>\r\n \r\n\r\n\r\n)\r\n}\r\n\r\n\r\n\r\nconst Message = ({message}: any) => {\r\n  console.log(message.Name);\r\n  \r\n  return (\r\n   <div>\r\n    {message.Name===\"admin\"?<Adminmessage message={message}/>:<Usermessage message={message}/>}\r\n     </div>\r\n  );\r\n};\r\nexport default Message;\r\n","C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\reportWebVitals.ts",[],"C:\\Users\\hakim\\OneDrive\\Bureau\\chat\\web_chat\\src\\component\\input\\input.tsx",[],{"ruleId":"44","severity":1,"message":"45","line":19,"column":6,"nodeType":"46","endLine":19,"endColumn":33,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":15,"column":9,"nodeType":"50","endLine":15,"endColumn":55},{"ruleId":"44","severity":1,"message":"51","line":11,"column":7,"nodeType":"46","endLine":11,"endColumn":9,"suggestions":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":47,"column":7,"nodeType":"59","messageId":"60","endLine":47,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Name' and 'Room'. Either include them or remove the dependency array.","ArrayExpression",["61"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.",["62"],"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'Mymessage' is assigned a value but never used.","Identifier","unusedVar",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [ENDPOINT, Name, Room, location.search]",{"range":"69","text":"70"},"Update the dependencies array to be: [socket]",{"range":"71","text":"72"},[694,721],"[ENDPOINT, Name, Room, location.search]",[350,352],"[socket]"]